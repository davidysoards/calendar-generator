{"version":3,"sources":["js/Header.js","js/Calendar.js","js/DaysOfWeek.js","js/Main.js","App.js","serviceWorker.js","index.js","img/glyphicons-46-calendar.svg"],"names":["Header","_ref","startDate","handleUpdate","react_default","a","createElement","className","src","logo","alt","width","type","name","id","defaultValue","dateFns","format","getDaysInMonth","Date","value","onClick","Calendar","endDate","currentMonth","prevSunday","startOfWeek","endOfMonth","monthYear","weeks","currentDate","days","i","push","key","addDays","colSpan","DaysOfWeek","props","Main","totalMonths","months","addMonths","js_Calendar","startOfMonth","js_DaysOfWeek","App","state","numberOfDays","_this","setState","startOfDay","document","getElementById","_this$state","this","console","log","differenceInCalendarMonths","js_Header","js_Main","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8236986d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport dateFns from 'date-fns';\nimport logo from '../img/glyphicons-46-calendar.svg';\n\nconst Header = ({ startDate, handleUpdate }) => {\n  return (\n    <div className=\"header-container\">\n      <div className=\"app-identity\">\n        <img src={logo} alt=\"calendar icon\" width=\"50px\" />\n        <h1>Calendar Generator</h1>\n      </div>\n      <form>\n        <div className=\"app-inputs\">\n          <label>Start Date</label>\n          <input\n            type=\"date\"\n            name=\"start date\"\n            id=\"start\"\n            defaultValue={dateFns.format(startDate, 'YYYY-MM-DD')}\n          />\n          <label># of Days</label>\n          <input\n            type=\"number\"\n            name=\"days\"\n            id=\"days\"\n            defaultValue={dateFns.getDaysInMonth(new Date())}\n          />\n          <input\n            type=\"button\"\n            id=\"update\"\n            value=\"Update\"\n            onClick={() => {\n              handleUpdate();\n            }}\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  handleUpdate: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport dateFns from 'date-fns';\n\nconst Calendar = ({ startDate, endDate, currentMonth }) => {\n  const prevSunday = dateFns.startOfWeek(startDate);\n  const endOfMonth = dateFns.endOfMonth(startDate);\n  const monthYear = dateFns.format(currentMonth, 'MMMM YYYY');\n  const dateFormat = 'D';\n  const weeks = [];\n\n  let currentDate = prevSunday;\n  let days = [];\n\n  while (currentDate <= endOfMonth && currentDate <= endDate) {\n    for (let i = 0; i < 7; i++) {\n      days.push(\n        <td\n          className={\n            currentDate < startDate ||\n            currentDate > endDate ||\n            currentDate > endOfMonth\n              ? 'invalid'\n              : ''\n          }\n          key={currentDate}\n        >\n          {dateFns.format(currentDate, dateFormat)}\n        </td>\n      );\n      currentDate = dateFns.addDays(currentDate, 1);\n    }\n    weeks.push(<tr key={currentDate}>{days}</tr>);\n    days = [];\n  }\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th colSpan=\"7\">\n            <h2>{monthYear}</h2>\n          </th>\n        </tr>\n      </thead>\n      <tbody>{weeks}</tbody>\n    </table>\n  );\n};\n\nCalendar.propTypes = {\n  startDate: PropTypes.instanceOf(Date),\n  endDate: PropTypes.instanceOf(Date).isRequired,\n  currentMonth: PropTypes.instanceOf(Date).isRequired,\n};\n\nexport default Calendar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport dateFns from 'date-fns';\n\nconst DaysOfWeek = props => {\n  const dateFormat = 'dd';\n  const prevSunday = dateFns.startOfWeek(new Date());\n  const days = [];\n\n  for (let i = 0; i < 7; i++) {\n    days.push(\n      <th key={i}>\n        {dateFns.format(dateFns.addDays(prevSunday, i), dateFormat)}\n      </th>\n    );\n  }\n  return (\n    <table className=\"days-of-week-header\">\n      <thead>\n        <tr>{days}</tr>\n      </thead>\n    </table>\n  );\n};\n\nDaysOfWeek.propTypes = {\n  startDate: PropTypes.string,\n};\n\nexport default DaysOfWeek;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport dateFns from 'date-fns';\nimport Calendar from './Calendar';\nimport DaysOfWeek from './DaysOfWeek';\n\nconst Main = ({ startDate, endDate, totalMonths }) => {\n  let months = [];\n  for (let i = 0; i <= totalMonths; i++) {\n    let currentMonth = dateFns.addMonths(startDate, i);\n    months.push(\n      <Calendar\n        startDate={i === 0 ? startDate : dateFns.startOfMonth(currentMonth)}\n        endDate={endDate}\n        currentMonth={currentMonth}\n        key={currentMonth}\n      />\n    );\n  }\n\n  return (\n    <div className=\"main-container\">\n      <DaysOfWeek />\n      {months}\n    </div>\n  );\n};\n\nMain.propTypes = {\n  startDate: PropTypes.instanceOf(Date),\n  endDate: PropTypes.instanceOf(Date).isRequired,\n  totalMonths: PropTypes.number.isRequired,\n};\n\nexport default Main;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport dateFns from 'date-fns';\nimport Header from './js/Header';\nimport Main from './js/Main';\n\nclass App extends Component {\n  state = {\n    startDate: dateFns.startOfMonth(new Date()),\n    numberOfDays: dateFns.getDaysInMonth(new Date()),\n  };\n\n  handleUpdate = () => {\n    this.setState({\n      startDate: dateFns.startOfDay(document.getElementById('start').value),\n      numberOfDays: document.getElementById('days').value,\n    });\n  };\n\n  render() {\n    const { startDate, numberOfDays } = this.state;\n    console.log('start date = ' + startDate);\n    const endDate = dateFns.addDays(startDate, numberOfDays - 1);\n    console.log('end date = ' + endDate);\n    const totalMonths = dateFns.differenceInCalendarMonths(endDate, startDate);\n    console.log('0 indexed # of months = ' + totalMonths);\n    return (\n      <div className=\"app-container\">\n        <header>\n          <Header handleUpdate={this.handleUpdate} startDate={startDate} />\n        </header>\n        <main>\n          <Main\n            startDate={startDate}\n            endDate={endDate}\n            totalMonths={totalMonths}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/glyphicons-46-calendar.fa525160.svg\";"],"sourceRoot":""}